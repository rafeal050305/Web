from flask import Flask, render_template, request, redirect, url_for, session, flash, make_response
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import os
from xhtml2pdf import pisa
import io

app = Flask(__name__)
app.secret_key = '050305'

DATABASE = 'baseDatos.db'

def get_db():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    if not os.path.exists(DATABASE):
        conn = sqlite3.connect(DATABASE)
        cur = conn.cursor()

        cur.execute('''
            CREATE TABLE IF NOT EXISTS usuario (
                id_usuario INTEGER PRIMARY KEY,
                nombres VARCHAR(100),
                apellidos VARCHAR(100),
                dni VARCHAR(100),
                password VARCHAR(100),
                correo VARCHAR(100),
                telefono VARCHAR(100),
                fecha_nacimiento VARCHAR(100)
            )
        ''')

        cur.execute('''
            CREATE TABLE IF NOT EXISTS citas_usuario (
                id_cita INTEGER PRIMARY KEY,
                id_usuario INTEGER NOT NULL,
                fecha VARCHAR(100),
                turno VARCHAR(100),
                horario VARCHAR(100),
                FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
                    ON DELETE CASCADE
                    ON UPDATE CASCADE
            )
        ''')

        cur.execute('''
            CREATE TABLE IF NOT EXISTS resultados_usuario (
                id_resultado INTEGER PRIMARY KEY,
                id_usuario INTEGER NOT NULL,
                fecha_envio VARCHAR(100),
                hora_envio VARCHAR(100),
                glucosa VARCHAR(100),
                colesterol VARCHAR(100),
                rbc VARCHAR(100),
                hemoglobina VARCHAR(100),
                hematocrito VARCHAR(100),
                wbd VARCHAR(100),
                rpl VARCHAR(100),
                grupo_sanguineo VARCHAR(100),
                eco TEXT,
                parasitalogico_simple TEXT,
                parasitalogico_seriado TEXT,
                pr_dengue TEXT,
                pr_helicobacter TEXT,
                link_drive TEXT,
                FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
                    ON DELETE CASCADE
                    ON UPDATE CASCADE
            )
        ''')

        conn.commit()
        conn.close()

@app.route('/')
def home():
    if 'user_id' in session:
        return render_template('home.html', user=session['user_name'])
    return redirect(url_for('login'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        nombres = request.form['nombres']
        apellidos = request.form['apellidos']
        dni = request.form['dni']
        password = generate_password_hash(request.form['password'])
        correo = request.form['correo']
        telefono = request.form['telefono']
        fecha_raw = request.form['fecha_nacimiento']
        fecha_nacimiento = datetime.strptime(fecha_raw, '%Y-%m-%d').strftime('%d-%m-%Y')


        conn = get_db()
        cur = conn.cursor()
        cur.execute("INSERT INTO usuario (nombres, apellidos, dni, password, correo, telefono, fecha_nacimiento) VALUES (?, ?, ?, ?, ?, ?, ?)",
                    (nombres, apellidos, dni, password, correo, telefono, fecha_nacimiento))
        conn.commit()
        conn.close()
        flash('Registro exitoso. Ahora puedes iniciar sesión.', 'success')
        return redirect(url_for('login'))

    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        correo = request.form['correo']
        password = request.form['password']

        conn = get_db()
        cur = conn.cursor()
        cur.execute("SELECT * FROM usuario WHERE correo = ?", (correo,))
        user = cur.fetchone()
        conn.close()

        if user and check_password_hash(user['password'], password):
            session['user_id'] = user['id_usuario']
            session['user_name'] = f"{user['nombres']} {user['apellidos']}"

            # Verificamos si es admin
            if user['correo'] == 'admin@gmail.com':
                session['is_admin'] = True
                return redirect(url_for('home_admin'))
            else:
                return redirect(url_for('home'))
        else:
            flash('Correo o contraseña incorrecta.', 'danger')

    return render_template('login.html')


@app.route('/citas')
def citas():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return render_template('citas.html', user=session['user_name'])


@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

@app.route('/crear_cita', methods=['GET', 'POST'])
def crear_cita():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        fecha_raw = request.form['fecha']
        fecha = datetime.strptime(fecha_raw, '%Y-%m-%d').strftime('%d-%m-%Y')
        turno = request.form['turno']
        horario = request.form['horario']
        id_usuario = session['user_id']

        conn = get_db()
        cur = conn.cursor()
        cur.execute('INSERT INTO citas_usuario (id_usuario, fecha, turno, horario) VALUES (?, ?, ?, ?)',
                    (id_usuario, fecha, turno, horario))
        conn.commit()
        conn.close()

        flash('Cita agendada exitosamente.', 'success')
        return redirect(url_for('citas'))

    return render_template('crear_cita.html')

@app.route('/historial_citas')
def historial_citas():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()
    cur.execute('SELECT fecha, turno, horario FROM citas_usuario WHERE id_usuario = ?', (session['user_id'],))
    citas = cur.fetchall()
    conn.close()

    return render_template('historial_citas.html', citas=citas)

@app.route('/historial_resultados')
def historial_resultados():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()
    user_id = session['user_id']

    cur.execute("""
        SELECT id_resultado, id_usuario, fecha_envio, hora_envio
        FROM resultados_usuario
        WHERE id_usuario = ?
        ORDER BY id_resultado DESC
    """, (user_id,))
    
    resultados = cur.fetchall()
    conn.close()

    return render_template('historial_resultados.html', resultados=resultados)

@app.route('/ver_resultado/<int:id_resultado>')
def ver_resultados_especifico(id_resultado):
    if 'user_id' not in session:
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    cur.execute("""
        SELECT *
        FROM resultados_usuario
        WHERE id_resultado = ? AND id_usuario = ?
    """, (id_resultado, session['user_id']))

    fila = cur.fetchone()
    conn.close()

    if not fila:
        return "Resultado no encontrado o no autorizado", 404

    resultado = dict(fila)  

    return render_template('ver_resultado_usuario.html', resultado=resultado)






#*==============================================================
#*  SECCION ADMINISTRADOR DE RESULTADOS DEL USUARIO
#*==============================================================

@app.route('/admin')
def home_admin():
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))
    return render_template('admin/home_admin.html')

@app.route('/admin/resultados')
def admin_resultados():
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))
    return render_template('admin/resultados_admin.html')

@app.route('/admin/usuarios_resultado')
def tabla_usuarios_resultado():
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    # Excluir usuarios con nombres 'ADMIN'
    cur.execute("""
        SELECT id_usuario, nombres, apellidos, correo, telefono
        FROM usuario
        WHERE UPPER(nombres) != 'ADMIN'
    """)
    usuarios = cur.fetchall()
    conn.close()

    return render_template('admin/tabla_usuarios_resultado.html', usuarios=usuarios)


@app.route('/admin/crear_resultado/<int:user_id>', methods=['GET', 'POST'])
def crear_resultado(user_id):
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    if request.method == 'POST':
        # Obtener los datos del formulario
        glucosa = request.form['glucosa']
        colesterol = request.form['colesterol']
        rbc = request.form['rbc']
        hemoglobina = request.form['hemoglobina']
        hematocrito = request.form['hematocrito']
        wbc = request.form['wbd']
        rpl = request.form['rpl']
        grupo_sanguineo = request.form['grupo_sanguineo']
        eco = request.form['eco']
        parasitalogico_simple = request.form['parasitalogico_simple']
        parasitalogico_seriado = request.form['parasitalogico_seriado']
        pr_dengue = request.form['pr_dengue']
        pr_helicobacter = request.form['pr_helicobacter']
        link_drive = request.form['link_drive']
        
        # Fecha
        fecha_envio_raw = request.form['fecha_envio']
        try:
            fecha_dt = datetime.strptime(fecha_envio_raw, "%Y-%m-%d")
            fecha_envio = fecha_dt.strftime("%d-%m-%Y")
        except ValueError:
            flash("Fecha inválida.", "danger")
            return render_template('admi/crear_resultado.html')

        # Hora
        hora_envio = request.form['hora_envio']

        # Guardar en la base de datos
        conn = get_db()
        cur = conn.cursor()

        cur.execute("""
            INSERT INTO resultados_usuario (
                id_usuario, fecha_envio, hora_envio, glucosa, colesterol, rbc,
                hemoglobina, hematocrito, wbd, rpl, grupo_sanguineo, eco,
                parasitalogico_simple, parasitalogico_seriado, pr_dengue, pr_helicobacter, link_drive
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            user_id, fecha_envio, hora_envio, glucosa, colesterol, rbc,
            hemoglobina, hematocrito, wbc, rpl, grupo_sanguineo, eco,
            parasitalogico_simple, parasitalogico_seriado, pr_dengue, pr_helicobacter, link_drive
        ))


        conn.commit()
        conn.close()

        flash('Resultado registrado exitosamente.', 'success')
        return redirect(url_for('admin_resultados'))

    return render_template('admin/crear_resultado.html', user_id=user_id)


@app.route('/admin/usuarios_consulta')
def tabla_edicion():
  
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    # Solo los campos existentes, sin 'sexo'
    cur.execute("""
        SELECT id_usuario, dni, nombres, apellidos, correo, telefono
        FROM usuario
        WHERE UPPER(nombres) != 'ADMIN'
    """)
    usuarios = cur.fetchall()
    conn.close()

    return render_template('admin/tabla_consulta.html', usuarios=usuarios)


    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    # Elimina el resultado relacionado al usuario
    cur.execute("DELETE FROM resultado WHERE usuario_id = %s", (user_id,))
    conn.commit()
    conn.close()

    return redirect(url_for('tabla_edicion'))

@app.route('/admin/resultados_usuario/<int:user_id>')
def ver_resultados_usuario(user_id):
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    # Obtener resultados
    cur.execute("""
        SELECT id_resultado, fecha_envio, hora_envio
        FROM resultados_usuario
        WHERE id_usuario = ?
        ORDER BY id_resultado DESC
    """, (user_id,))
    resultados = cur.fetchall()

    # Obtener nombres y apellidos del usuario
    cur.execute("SELECT nombres, apellidos FROM usuario WHERE id_usuario = ?", (user_id,))
    usuario = cur.fetchone()

    conn.close()

    return render_template(
        'admin/multiples_resultados_por_usuario.html',
        resultados=resultados,
        usuario=usuario
    )

@app.route('/admin/editar_resultado/<int:id_resultado>', methods=['GET', 'POST'])
def editar_resultado(id_resultado):
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    if request.method == 'POST':
        # Captura de los campos desde el formulario
        glucosa = request.form['glucosa']
        colesterol = request.form['colesterol']
        hemoglobina = request.form['hemoglobina']
        rbc = request.form['rbc']
        hematocrito = request.form['hematocrito']
        wbd = request.form['wbd']
        rpl = request.form['rpl']
        grupo_sanguineo = request.form['grupo_sanguineo']
        eco = request.form['eco']
        parasitalogico_simple = request.form['parasitalogico_simple']
        parasitalogico_seriado = request.form['parasitalogico_seriado']
        pr_dengue = request.form['pr_dengue']
        pr_helicobacter = request.form['pr_helicobacter']
        link_drive = request.form['link_drive']

        # Actualizar los datos
        cur.execute("""
            UPDATE resultados_usuario
            SET glucosa = ?, colesterol = ?, hemoglobina = ?, rbc = ?, hematocrito = ?, wbd = ?, rpl = ?, 
                grupo_sanguineo = ?, eco = ?, parasitalogico_simple = ?, parasitalogico_seriado = ?, 
                pr_dengue = ?, pr_helicobacter = ?, link_drive = ?
            WHERE id_resultado = ?
        """, (
            glucosa, colesterol, hemoglobina, rbc, hematocrito, wbd, rpl,
            grupo_sanguineo, eco, parasitalogico_simple, parasitalogico_seriado,
            pr_dengue, pr_helicobacter, link_drive, id_resultado
        ))

        conn.commit()
        conn.close()
        return redirect(url_for('admin_resultados'))  # o a donde quieras redirigir

    # Si es GET, obtener los datos actuales del resultado
    cur.execute("SELECT * FROM resultados_usuario WHERE id_resultado = ?", (id_resultado,))
    resultado = cur.fetchone()
    conn.close()

    return render_template('admin/editar_resultado.html', resultado=resultado)

@app.route('/admin/eliminar_resultado/<int:id_resultado>')
def eliminar_resultado(id_resultado):
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    cur.execute("DELETE FROM resultados_usuario WHERE id_resultado = ?", (id_resultado,))
    conn.commit()
    conn.close()

    flash("Resultado eliminado correctamente.")
    return redirect(request.referrer or url_for('admin_resultados'))

#*==============================================================
#* SECCION ADMINISTRADOR DE CITAS DEL USUARIO

@app.route('/admin/citas_usuario/<int:user_id>')
def detalle_citas_usuario(user_id):
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    # Obtener nombre completo del usuario
    cur.execute("SELECT nombres, apellidos FROM usuario WHERE id_usuario = ?", (user_id,))
    usuario = cur.fetchone()
    nombre_completo = f"{usuario['nombres']} {usuario['apellidos']}" if usuario else "Usuario"

    # Obtener citas del usuario
    cur.execute("""
        SELECT id_cita, fecha, turno, horario
        FROM citas_usuario
        WHERE id_usuario = ?
    """, (user_id,))
    citas_usuario = cur.fetchall()
    conn.close()

    return render_template('admin/detalle_citas_usuario.html', citas_usuario=citas_usuario, nombre_completo=nombre_completo)

@app.route('/admin/citas_general')
def citas_general():
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    cur.execute("""
    SELECT id_usuario, nombres, apellidos, dni, correo, telefono
    FROM usuario
    WHERE UPPER(nombres) != 'ADMIN'
    """)

    citas = cur.fetchall()
    conn.close()

    return render_template('admin/citas_general_usuarios.html', citas=citas)

@app.route('/admin/editar_cita/<int:id_cita>', methods=['GET', 'POST'])
def editar_cita(id_cita):
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    if request.method == 'POST':
        nueva_fecha = request.form['fecha']
        nuevo_turno = request.form['turno']
        nuevo_horario = request.form['horario']


        cur.execute("SELECT id_usuario FROM citas_usuario WHERE id_cita = ?", (id_cita,))
        resultado = cur.fetchone()
        if not resultado:
            conn.close()
            return "Usuario no encontrado", 404

        user_id = resultado['id_usuario']


        cur.execute("""
            UPDATE citas_usuario
            SET fecha = ?, turno = ?, horario = ?
            WHERE id_cita = ?
        """, (nueva_fecha, nuevo_turno, nuevo_horario, id_cita))

        conn.commit()
        conn.close()


        return redirect(url_for('detalle_citas_usuario', user_id=user_id))


    cur.execute("SELECT * FROM citas_usuario WHERE id_cita = ?", (id_cita,))
    cita = cur.fetchone()
    conn.close()

    if not cita:
        return "Cita no encontrada", 404

    cita = dict(cita)


    if 'turno' in cita:
        cita['turno'] = cita['turno'].strip().capitalize()


    if 'fecha' in cita:
        from datetime import datetime
        try:
            fecha_obj = datetime.strptime(cita['fecha'], '%d-%m-%Y')
            cita['fecha'] = fecha_obj.strftime('%Y-%m-%d')
        except ValueError:
            pass

    return render_template('admin/editar_cita.html', cita=cita)

@app.route('/admin/eliminar_cita/<int:id_cita>', methods=['GET'])
def eliminar_cita(id_cita):
    if 'user_id' not in session or not session.get('is_admin'):
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()

    # Obtener el ID del usuario antes de eliminar la cita
    cur.execute("SELECT id_usuario FROM citas_usuario WHERE id_cita = ?", (id_cita,))
    result = cur.fetchone()

    if not result:
        conn.close()
        flash('La cita no existe o ya fue eliminada', 'danger')
        return redirect(url_for('citas_general'))

    user_id = result['id_usuario']

    # Eliminar la cita
    cur.execute("DELETE FROM citas_usuario WHERE id_cita = ?", (id_cita,))
    conn.commit()
    conn.close()

    flash('Cita eliminada correctamente', 'success')
    return redirect(url_for('detalle_citas_usuario', user_id=user_id))

#*==============================================================
#* REPORTE DE DATOS DE USUARIO
#*==============================================================




@app.route('/descargar_pdf/<int:id_resultado>')
def descargar_pdf(id_resultado):
    if 'user_id' not in session:
        return redirect(url_for('login'))

    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        SELECT * FROM resultados_usuario
        WHERE id_resultado = ? AND id_usuario = ?
    """, (id_resultado, session['user_id']))
    fila = cur.fetchone()
    conn.close()

    if not fila:
        return "Resultado no encontrado", 404

    resultado = dict(fila)

    # Renderizar la plantilla HTML
    html = render_template("pdf_resultado.html", resultado=resultado)

    # Convertir a PDF
    pdf_stream = io.BytesIO()
    pisa_status = pisa.CreatePDF(html, dest=pdf_stream)

    if pisa_status.err:
        return "Error al generar el PDF", 500

    response = make_response(pdf_stream.getvalue())
    response.headers['Content-Type'] = 'application/pdf'
    response.headers['Content-Disposition'] = 'attachment; filename=resultado.pdf'
    return response


if __name__ == '__main__':
    init_db()
    app.run(debug=True)
